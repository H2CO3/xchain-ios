***************
*** 5029,5034 ****
  }
  
  template <>
  StubAtom<x86_64>::StubAtom(Writer<x86_64>& writer, ObjectFile::Atom& target)
   : WriterAtom<x86_64>(writer, Segment::fgTextSegment), fName(stubName(target.getName())), fTarget(target)
  {
--- 5029,5057 ----
  }
  
  template <>
+ StubHelperAtom<x86_64>::StubHelperAtom(Writer<x86_64>& writer, ObjectFile::Atom& target, ObjectFile::Atom& lazyPointer)
+  : WriterAtom<x86_64>(writer, Segment::fgTextSegment), fName(stubName(target.getName())), fTarget(target)
+ {
+ 	writer.fAllSynthesizedStubHelpers.push_back(this);
+ 
+ 	fReferences.push_back(new WriterReference<x86_64>(3, x86_64::kPCRel32, &lazyPointer));
+ 	fReferences.push_back(new WriterReference<x86_64>(8, x86_64::kPCRel32, writer.fDyldHelper));
+ 	if ( writer.fDyldHelper == NULL )
+ 		throw "symbol dyld_stub_binding_helper not defined (usually in crt1.o/dylib1.o/bundle1.o)";
+ }
+ 
+ // specialize lazy pointer for x86_64 to initially pointer to stub helper
+ template <>
+ LazyPointerAtom<x86_64>::LazyPointerAtom(Writer<x86_64>& writer, ObjectFile::Atom& target)
+  : WriterAtom<x86_64>(writer, Segment::fgDataSegment), fName(lazyPointerName(target.getName())), fTarget(target)
+ {
+ 	writer.fAllSynthesizedLazyPointers.push_back(this);
+ 
+ 	StubHelperAtom<x86_64>* helper = new StubHelperAtom<x86_64>(writer, target, *this);
+ 	fReferences.push_back(new WriterReference<x86_64>(0, x86_64::kPointer, helper));
+ }
+ 
+ template <>
  StubAtom<x86_64>::StubAtom(Writer<x86_64>& writer, ObjectFile::Atom& target)
   : WriterAtom<x86_64>(writer, Segment::fgTextSegment), fName(stubName(target.getName())), fTarget(target)
  {
***************
*** 5167,5184 ****
  
  
  
- template <>
- StubHelperAtom<x86_64>::StubHelperAtom(Writer<x86_64>& writer, ObjectFile::Atom& target, ObjectFile::Atom& lazyPointer)
-  : WriterAtom<x86_64>(writer, Segment::fgTextSegment), fName(stubName(target.getName())), fTarget(target)
- {
- 	writer.fAllSynthesizedStubHelpers.push_back(this);
  
- 	fReferences.push_back(new WriterReference<x86_64>(3, x86_64::kPCRel32, &lazyPointer));
- 	fReferences.push_back(new WriterReference<x86_64>(8, x86_64::kPCRel32, writer.fDyldHelper));
- 	if ( writer.fDyldHelper == NULL )
- 		throw "symbol dyld_stub_binding_helper not defined (usually in crt1.o/dylib1.o/bundle1.o)";
- }
- 
  template <>
  uint64_t StubHelperAtom<x86_64>::getSize() const
  {
--- 5190,5196 ----
  
  
  
  
  template <>
  uint64_t StubHelperAtom<x86_64>::getSize() const
  {
***************
*** 5211,5228 ****
  }
  
  
- // specialize lazy pointer for x86_64 to initially pointer to stub helper
- template <>
- LazyPointerAtom<x86_64>::LazyPointerAtom(Writer<x86_64>& writer, ObjectFile::Atom& target)
-  : WriterAtom<x86_64>(writer, Segment::fgDataSegment), fName(lazyPointerName(target.getName())), fTarget(target)
- {
- 	writer.fAllSynthesizedLazyPointers.push_back(this);
  
- 	StubHelperAtom<x86_64>* helper = new StubHelperAtom<x86_64>(writer, target, *this);
- 	fReferences.push_back(new WriterReference<x86_64>(0, x86_64::kPointer, helper));
- }
- 
- 
  template <typename A>
  LazyPointerAtom<A>::LazyPointerAtom(Writer<A>& writer, ObjectFile::Atom& target)
   : WriterAtom<A>(writer, Segment::fgDataSegment), fName(lazyPointerName(target.getName())), fTarget(target)
--- 5223,5229 ----
  }
  
  
  
  template <typename A>
  LazyPointerAtom<A>::LazyPointerAtom(Writer<A>& writer, ObjectFile::Atom& target)
   : WriterAtom<A>(writer, Segment::fgDataSegment), fName(lazyPointerName(target.getName())), fTarget(target)
