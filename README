Based on original documentation by OpenTTD team
http://devs.openttd.org/~truebrain/compile-farm/apple-darwin9.txt

With these files you may build odcctools and GCC 4.0.1 targetting Darwin/OS X.
This has been tested in the following environments:
x86_64-pc-linux-gnu

The following targets have been tested:
i686-apple-darwin11
x86_64-apple-darwin11

These might work:
ppc-apple-darwin11
ppc64-apple-darwin11

These do not work (without extra work):
arm-apple-darwin

Decide your target, and export:
export TARGET=i686-apple-darwin11

11 denotes Lion, 10 for Snow Leopard, and 9 for Leopard. These are mostly superficial. All code will run on 10.5 and greater.

BUILDING ODCCTOOLS
Apple's equivalent of binutils (now called cctools)
Do not apply any patches in the patches directory! They are there for reference purposes only.

$ cd odcctools-9.2-ld

Depending on your machine:
32-bit x86:
$ ./configure --prefix=/usr/$TARGET --target=$TARGET --with-sysroot=/usr/$TARGET --enable-ld64

64-bit x86 (don't worry if you are building for x86_64, they still work):
$ LDFLAGS="-m32" CFLAGS="-m32" ./configure --prefix=/usr/$TARGET --target=$TARGET --with-sysroot=/usr/$TARGET --enable-ld64

NOTE: If you have not built your GCC with support for Objective C++, then do the following:
vi Makefile
Where it says COMPONENTS =, remove 'otool'.

$ make
$ make install
$ cd ..

Set PATH to have your new tools.
$ export PATH="$PATH:/usr/$TARGET/bin"

BUILDING GCC
Before you can build GCC you will need to get the Mac OS X SDK headers. The best place is right off your Mac with scp (tested with default install of Xcode 4.1.1):
$ scp -r myname@mymac:/Developer/SDKs .

You will now have a directory SDKs present. You only need 10.6 or 10.7, so:
$ rm -R SDKs/MacOSX10.6.sdk

You also do not need anything in the Library section since we cannot have both private and public Libraries in the toolchain like in OS X. If SDKS/[directory]/Library/Frameworks is not a symlink, do the following:
$ rm -fR SDKs/MacOSX10.7.sdk/Library/Frameworks
$ ln -s SDKs/MacOSX10.7.sdk/System/Frameworks SDKs/MacOSX10.7.sdk/Library/Frameworks

Move this into where your toolchain lives:
$ mv SDKs /usr/$TARGET

Set up proper symlinks for GCC:
$ export LAST=`pwd`
$ cd /usr/$TARGET
$ ln -s SDKs/Developer
$ ln -s SDKs/Library
$ ln -s SDKS/System
$ ln -s SDKs/usr
$ cd $LAST

Now you can proceed to build GCC, but it must be patched first. Patches are located in gcc-5490/patches.
Apply any patches with:
patch -p0 < patchfile.patch

gcc-32bit.patch   -- Apply if you use a x86 32-bit machine (may not be necessary)
gcc-64bit.patch   -- Apply if you use an x86_64 machine
gcc-cflags.patch  -- Always apply
gcc-tooldir.patch -- Apply if you are annoyed with multiple subdirectories

After patching, I recommend building outside of the source of GCC.
$ mkdir gcc-build
$ cd gcc-build

If on 32-bit:
$ ../gcc-5490/configure --prefix=/usr/$TARGET \
--disable-checking \
--enable-languages=c,objc,c++,obj-c++ \
--with-as=/usr/$TARGET/bin/$TARGET-as \
--with-ld=/usr/$TARGET/bin/$TARGET-ld64 \
--target=$TARGET \
--with-sysroot=/usr/$TARGET \
--enable-static \
--enable-shared \
--disable-nls \
--disable-multilib \
--with-ranlib=/usr/$TARGET/bin/$TARGET-ranlib \
--with-lipo=/usr/$TARGET/bin/$TARGET-lipo

If on 64-bit, the same as above but prefix with -m32 to force a 32-bit build.
$ CFLAGS="-m32" LDFLAGS="-m32" \
../gcc-5490/configure --prefix=/usr/$TARGET \
--disable-checking \
--enable-languages=c,objc,c++,obj-c++ \
--with-as=/usr/$TARGET/bin/$TARGET-as \
--with-ld=/usr/$TARGET/bin/$TARGET-ld64 \
--target=$TARGET \
--with-sysroot=/usr/$TARGET \
--enable-static \
--enable-shared \
--disable-nls \
--disable-multilib \
--with-ranlib=/usr/$TARGET/bin/$TARGET-ranlib \
--with-lipo=/usr/$TARGET/bin/$TARGET-lipo

Make and install like normal.
$ make
$ make install

Sometimes you may get an issue about ranlib not working or lipo, which is why --with-ranlib and --with-lipo are appended to ./configure. However, you may have to run make again or not use a -j flag. I would recommend not using the -j flag anyway just to ease debugging of any issues. Seriously, try doing `make` over and over until it does work.

Test it out. And get familiar with OS X's GCC (particularly -framework). An example Objective-C file msg.m is included.

$ i686-apple-darwin11-gcc -o msg msg.m \
-fconstant-string-class=NSConstantString \
-lobjc -framework Foundation \
-I/usr/$TARGET/lib/gcc/i686-apple-darwin11/4.0.1/include

I know, that's a weird -I flag. For now, just use an alias for both [arch]-gcc and [arch]-g++.

$ file msg
msg: Mach-O executable i386

$ scp msg myname@mymac:
$ ssh myname@mymac file msg
$ ssh myname@mymac ./msg
2011-09-03 03:51:52.887 msg[31266:1007] Are you John smith?
2011-09-03 03:51:52.889 msg[31266:1007] My message

Have fun.

Things to do:
- Get ARM version to build, but that will be with llvm-gcc based on the iphone-dev project
- distcc for all targets
- Get p5666 version of GCC to build on Linux (this is close to the version shipped with Xcode 4.1.1)
- Get latest cctools to build on Linux (DONE except for cbtlibs, efitools, gprof)
- Clang
- HOWTO generate fat binaries (maybe)
- HOWTO generate .app directory, plist, Resources, etc (nib files and CoreData very unlikely)
