Based on original documentation by OpenTTD team
http://devs.openttd.org/~truebrain/compile-farm/apple-darwin9.txt

With these files you may build odcctools and GCC 4.0.1 targetting Darwin/OS X.
This has been tested in the following environments:
x86_64-pc-linux-gnu

The following targets have been tested:
i686-apple-darwin11
x86_64-apple-darwin11

These might work:
ppc-apple-darwin11
ppc64-apple-darwin11

These do not work (without extra work):
arm-apple-darwin

Decide your target, and export:
export TARGET=i686-apple-darwin11

11 denotes Lion, 10 for Snow Leopard, and 9 for Leopard. These are mostly superficial. All code will run on 10.5 and greater.

BUILDING CCTOOLS/ODCCTOOLS
Apple's equivalent of binutils (now called cctools)
Do not apply any patches in the patches directory! They are there for reference purposes only.

$ cd cctools-806-patched
$ LDFLAGS="-m32" CFLAGS="-m32" ./configure --prefix=/usr/$TARGET --target=$TARGET --with-sysroot=/usr/$TARGET
$ make
$ make install

We need ar and ranlib from odcctools-9.2 due to a bug, and we need ld64.
$ cd ../odcctools-9.2-ld-only-required
$ LDFLAGS="-m32" CFLAGS="-m32" ./configure --prefix=/usr/$TARGET --target=$TARGET --with-sysroot=/usr/$TARGET
$ make
$ make install

Set PATH to have your new tools.
$ export PATH="$PATH:/usr/$TARGET/bin"

BUILDING GCC
Before you can build GCC you will need to get the Mac OS X SDK headers. The best place is right off your Mac with scp (tested with default install of Xcode 4.1.1):
$ scp -r myname@mymac:/Developer/SDKs .

You will now have a directory SDKs present. You only need 10.6 or 10.7, so:
$ rm -R SDKs/MacOSX10.6.sdk

You also do not need anything in the Library section since we cannot have both private and public Libraries in the toolchain like in OS X. If SDKS/[directory]/Library/Frameworks is not a symlink, do the following:
$ rm -fR SDKs/MacOSX10.7.sdk/Library/Frameworks
$ ln -s SDKs/MacOSX10.7.sdk/System/Frameworks SDKs/MacOSX10.7.sdk/Library/Frameworks

Move this into where your toolchain lives:
$ mv SDKs /usr/$TARGET

Set up proper symlinks for GCC:
$ export LAST=`pwd`
$ cd /usr/$TARGET
$ ln -s SDKs/Developer
$ ln -s SDKs/Library
$ ln -s SDKS/System
$ ln -s SDKs/usr
$ cd $LAST

Now you can proceed to build GCC, but it must be patched first. Patches are located in patches.
$ cd gcc-5666.3
$ patch -p1 < ../patches/gcc-5666.3-cflags.patch

Apply if you are annoyed by the default directory structure:
$ patch -p1 < ../patches/gcc-5666.3-tooldir.patch

$ cd ..

After patching, I recommend building outside of the source of GCC.
$ mkdir gcc-build
$ cd gcc-build

$ CFLAGS="-m32" CXXFLAGS="$CFLAGS" LDFLAGS="-m32" \
../gcc-5666.3/configure --prefix=/usr/$TARGET \
--disable-checking \
--enable-languages=c,objc,c++,obj-c++ \
--with-as=/usr/$TARGET/bin/$TARGET-as \
--with-ld=/usr/$TARGET/bin/$TARGET-ld64 \
--target=$TARGET \
--with-sysroot=/usr/$TARGET \
--enable-static \
--enable-shared \
--enable-nls \
--disable-multilib \
--disable-werror \
--with-ranlib=/usr/$TARGET/bin/$TARGET-ranlib \
--with-lipo=/usr/$TARGET/bin/$TARGET-lipo

Optimisations do work (most of the time), so if you want to, use:
CFLAGS="-m32 -O2 -msse2" # etc

These also may work for you:
--enable-libgomp
--with-system-zlib
--without-included-gettext

No, there is no Java (GCJ) or Fortran!

Make and install like normal.
$ make
$ make install

Sometimes you may get an issue about ranlib not working or lipo, which is why --with-ranlib and --with-lipo are appended to ./configure. However, you may have to run make again or not use a -j flag. I would recommend not using the -j flag anyway just to ease debugging of any issues. Seriously, try doing `make` over and over until it does work.

For ranlib, make sure that $TARGET-ranlib outputs exactly as follows:
$ $TARGET-ranlib
x86_64-apple-darwin11-ranlib: no archives specified
Usage: x86_64-apple-darwin11-ranlib [-sactfqLT] [-] archive [...]

If it does not, it is running in libtool mode and you have the wrong version installed.

You may get an issue about libiberty.an not being able to be installed. You can safely ignore this error for now.

Hack to fix the include path:
$ cd /usr/$TARGET
$ mkdir -p local
$ cd local
$ ln -s ../lib/gcc/$TARGET/4.2.1/include

Test it out. And get familiar with OS X's GCC (particularly -framework). An example Objective-C file msg.m is included.

$ $TARGET-gcc -o msg msg.m \
-fconstant-string-class=NSConstantString \
-lobjc -framework Foundation

Test C++:
$ $TARGET-g++ -o msgcpp msg.cpp \
-I/usr/$TARGET/usr/include/c++/4.2.1

I know, that's a weird -I flag. For now, just use an alias for both [arch]-gcc and [arch]-g++ with it.

$ file msg
msg: Mach-O executable i386

$ scp msg msg myname@mymac
$ ssh myname@mymac ./msg
2011-09-03 03:51:52.887 msg[31266:1007] Are you John smith?
2011-09-03 03:51:52.889 msg[31266:1007] My message
$ ssh myname@mymac ./msgcpp
This was compiled on a non-Mac!

Have fun.

Distcc for Gentoo (not for Objective-C or C++ yet due to include path issues):
Follow these instructions:
http://www.gentoo.org/doc/en/distcc.xml
http://www.gentoo.org/doc/en/cross-compiling-distcc.xml (with your target being OS X Prefix)

Things to do:
- Get ARM version to build, but that will be with llvm-gcc based on the iphone-dev project
- distcc for Objective-C and C++
- distcc with MacPorts
- Get p5666 version of GCC to build on Linux (DONE except for libiberty.an issue on make install)
- Get latest cctools to build on Linux (DONE except for ar, ranlib, cbtlibs, efitools, gprof)
- Clang
- HOWTO generate fat binaries (maybe)
- HOWTO generate .app directory, plist, Resources, etc (nib files and CoreData very unlikely)
- Fix paths when invoked (sysroot issue):
$ $TARGET-g++ -v -o msgcpp msg.cpp
Using built-in specs.
Target: x86_64-apple-darwin11
Configured with: ../gcc-5666.3/configure --disable-checking --enable-languages=c,objc,c++,obj-c++ --with-as=/home/tatsh/usr/x86_64-apple-darwin11/usr/bin/x86_64-apple-darwin11-as -with-ld=/home/tatsh/usr/x86_64-apple-darwin11/usr/bin/x86_64-apple-darwin11-ld64 --target=x86_64-apple-darwin11 --with-sysroot=/home/tatsh/usr/x86_64-apple-darwin11 --enable-shared --disable-multilib --with-ranlib=/home/tatsh/usr/x86_64-apple-darwin11/usr/bin/x86_64-apple-darwin11-ranlib --with-lipo=/home/tatsh/usr/x86_64-apple-darwin11/usr/bin/x86_64-apple-darwin11-lipo --enable-nls --enable-libgomp --disable-werror --prefix=/home/tatsh/usr/x86_64-apple-darwin11/usr --enable-static
Thread model: posix
gcc version 4.2.1 (Apple Inc. build 5666) (dot 3)
 /home/tatsh/usr/x86_64-apple-darwin11/usr/libexec/gcc/x86_64-apple-darwin11/4.2.1/cc1plus -quiet -v -D__DYNAMIC__ msg.cpp -fPIC -mmacosx-version-min=10.4 -quiet -dumpbase msg.cpp -mtune=core2 -auxbase msg -version -D__private_extern__=extern -o /tmp/ccpueNJh.s
ignoring nonexistent directory "/home/tatsh/usr/x86_64-apple-darwin11/home/tatsh/usr/x86_64-apple-darwin11/usr/lib/gcc/x86_64-apple-darwin11/4.2.1/../../../../x86_64-apple-darwin11/include/c++/4.2.1"
ignoring nonexistent directory "/home/tatsh/usr/x86_64-apple-darwin11/home/tatsh/usr/x86_64-apple-darwin11/usr/lib/gcc/x86_64-apple-darwin11/4.2.1/../../../../x86_64-apple-darwin11/include/c++/4.2.1/x86_64-apple-darwin11"
ignoring nonexistent directory "/home/tatsh/usr/x86_64-apple-darwin11/home/tatsh/usr/x86_64-apple-darwin11/usr/lib/gcc/x86_64-apple-darwin11/4.2.1/../../../../x86_64-apple-darwin11/include/c++/4.2.1/backward"
ignoring nonexistent directory "/home/tatsh/usr/x86_64-apple-darwin11/home/tatsh/usr/x86_64-apple-darwin11/usr/lib/gcc/x86_64-apple-darwin11/4.2.1/include"
ignoring nonexistent directory "/home/tatsh/usr/x86_64-apple-darwin11/home/tatsh/usr/x86_64-apple-darwin11/usr/lib/gcc/x86_64-apple-darwin11/4.2.1/../../../../x86_64-apple-darwin11/include"
ignoring nonexistent directory "/home/tatsh/usr/x86_64-apple-darwin11/System/Library/Frameworks"
ignoring nonexistent directory "/home/tatsh/usr/x86_64-apple-darwin11/Library/Frameworks"
#include "..." search starts here:
#include <...> search starts here:
 /home/tatsh/usr/x86_64-apple-darwin11/usr/local/include
 /home/tatsh/usr/x86_64-apple-darwin11/usr/include
End of search list.
GNU C++ version 4.2.1 (Apple Inc. build 5666) (dot 3) (x86_64-apple-darwin11)
        compiled by GNU C version 4.5.3.
GGC heuristics: --param ggc-min-expand=150 --param ggc-min-heapsize=131072
Compiler executable checksum: 9eb62f00fb2e439c9d3d1ba4c8db15f6
msg.cpp:1:20: error: iostream: No such file or directory
msg.cpp: In function ‘int main()’:
msg.cpp:5: error: ‘cout’ was not declared in this scope
msg.cpp:5: error: ‘endl’ was not declared in this scope
